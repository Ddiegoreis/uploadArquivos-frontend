{"ast":null,"code":"var _jsxFileName = \"/home/diego/Documentos/www/uploadArquivos/frontend/src/App.js\";\nimport React, { Component } from 'react';\nimport { useState, useEffect } from 'react';\nimport { uniqueId } from 'lodash';\nimport filesize from 'filesize';\nimport api from './services/api';\nimport GlobalStyle from './styles/global';\nimport { Container, Content } from './styles';\nimport Upload from './components/Upload';\nimport FileList from './components/FileList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      uploadedFiles: []\n    };\n\n    this.handleUpload = files => {\n      const uploadedFiles = files.map(file => ({\n        file,\n        id: uniqueId(),\n        name: file.name,\n        readableSize: filesize(file.size),\n        preview: URL.createObjectURL(file),\n        progress: 0,\n        uploaded: false,\n        error: false,\n        url: null\n      }));\n      this.setState({\n        uploadedFiles: this.state.uploadedFiles.concat(uploadedFiles)\n      });\n      uploadedFiles.forEach(this.processUpload);\n    };\n\n    this.updateFile = (id, data) => {\n      this.setState({\n        uploadedFiles: this.state.uploadedFiles.map(uploadedFile => {\n          return id === uploadedFile.id ? { ...uploadedFile,\n            ...data\n          } : uploadedFile;\n        })\n      });\n    };\n\n    this.processUpload = uploadedFile => {\n      const data = new FormData();\n      data.append('file', uploadedFile.file, uploadedFile.name);\n      api.post('posts', data, {\n        onUploadProgress: e => {\n          const progress = parseInt(Math.round(e.loaded * 100 / e.total));\n          this.updateFile(uploadedFile.id, {\n            progress\n          });\n        }\n      }).then(response => {\n        this.updateFile(uploadedFile.id, {\n          uploaded: true,\n          id: response.data._id,\n          url: response.data.url\n        });\n      }).catch(() => {\n        this.updateFile(uploadedFile.id, {\n          error: true\n        });\n      });\n    };\n\n    this.handleDelete = async id => {\n      await api.delete(`posts/${id}`);\n      this.setState({\n        uploadedFiles: this.state.uploadedFiles.filter(file => file.id !== id)\n      });\n    };\n  }\n\n  async componentDidMount() {\n    const response = await api.get('posts');\n    this.setState({\n      uploadedFiles: response.data.map(file => ({\n        id: file._id,\n        name: file.name,\n        readableSize: filesize(file.size),\n        preview: file.url,\n        uploaded: true,\n        url: file.url\n      }))\n    });\n  }\n\n  componentWillUnmount() {\n    this.state.uploadedFiles.forEach(file => URL.revokeObjectURL(file.preview));\n  }\n\n  render() {\n    const {\n      uploadedFiles\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Content, {\n        children: [/*#__PURE__*/_jsxDEV(Upload, {\n          onUpload: this.handleUpload\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 6\n        }, this), !!uploadedFiles.length && /*#__PURE__*/_jsxDEV(FileList, {\n          files: uploadedFiles,\n          onDelete: this.handleDelete\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(GlobalStyle, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/diego/Documentos/www/uploadArquivos/frontend/src/App.js"],"names":["React","Component","useState","useEffect","uniqueId","filesize","api","GlobalStyle","Container","Content","Upload","FileList","App","state","uploadedFiles","handleUpload","files","map","file","id","name","readableSize","size","preview","URL","createObjectURL","progress","uploaded","error","url","setState","concat","forEach","processUpload","updateFile","data","uploadedFile","FormData","append","post","onUploadProgress","e","parseInt","Math","round","loaded","total","then","response","_id","catch","handleDelete","delete","filter","componentDidMount","get","componentWillUnmount","revokeObjectURL","render","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,QAAT,QAAyB,QAAzB;AACA,OAAOC,QAAP,MAAqB,UAArB;AAEA,OAAOC,GAAP,MAAgB,gBAAhB;AAEA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,UAAnC;AAEA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,QAAP,MAAqB,uBAArB;;;AAEA,MAAMC,GAAN,SAAkBX,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC3BY,KAD2B,GACnB;AACPC,MAAAA,aAAa,EAAE;AADR,KADmB;;AAAA,SAoB3BC,YApB2B,GAoBXC,KAAD,IAAW;AACzB,YAAMF,aAAa,GAAGE,KAAK,CAACC,GAAN,CAAWC,IAAD,KAAW;AAC1CA,QAAAA,IAD0C;AAE1CC,QAAAA,EAAE,EAAEf,QAAQ,EAF8B;AAG1CgB,QAAAA,IAAI,EAAEF,IAAI,CAACE,IAH+B;AAI1CC,QAAAA,YAAY,EAAEhB,QAAQ,CAACa,IAAI,CAACI,IAAN,CAJoB;AAK1CC,QAAAA,OAAO,EAAEC,GAAG,CAACC,eAAJ,CAAoBP,IAApB,CALiC;AAM1CQ,QAAAA,QAAQ,EAAE,CANgC;AAO1CC,QAAAA,QAAQ,EAAE,KAPgC;AAQ1CC,QAAAA,KAAK,EAAE,KARmC;AAS1CC,QAAAA,GAAG,EAAE;AATqC,OAAX,CAAV,CAAtB;AAYA,WAAKC,QAAL,CAAc;AACbhB,QAAAA,aAAa,EAAE,KAAKD,KAAL,CAAWC,aAAX,CAAyBiB,MAAzB,CACdjB,aADc;AADF,OAAd;AAMAA,MAAAA,aAAa,CAACkB,OAAd,CAAsB,KAAKC,aAA3B;AACA,KAxC0B;;AAAA,SA0C3BC,UA1C2B,GA0Cd,CAACf,EAAD,EAAKgB,IAAL,KAAc;AAC1B,WAAKL,QAAL,CAAc;AACbhB,QAAAA,aAAa,EAAE,KAAKD,KAAL,CAAWC,aAAX,CAAyBG,GAAzB,CACbmB,YAAD,IAAkB;AACjB,iBAAOjB,EAAE,KAAKiB,YAAY,CAACjB,EAApB,GACJ,EAAE,GAAGiB,YAAL;AAAmB,eAAGD;AAAtB,WADI,GAEJC,YAFH;AAGA,SALa;AADF,OAAd;AASA,KApD0B;;AAAA,SAsD3BH,aAtD2B,GAsDVG,YAAD,IAAkB;AACjC,YAAMD,IAAI,GAAG,IAAIE,QAAJ,EAAb;AAEAF,MAAAA,IAAI,CAACG,MAAL,CAAY,MAAZ,EAAoBF,YAAY,CAAClB,IAAjC,EAAuCkB,YAAY,CAAChB,IAApD;AAEAd,MAAAA,GAAG,CAACiC,IAAJ,CAAS,OAAT,EAAkBJ,IAAlB,EAAwB;AACvBK,QAAAA,gBAAgB,EAAGC,CAAD,IAAO;AACxB,gBAAMf,QAAQ,GAAGgB,QAAQ,CACxBC,IAAI,CAACC,KAAL,CAAYH,CAAC,CAACI,MAAF,GAAW,GAAZ,GAAmBJ,CAAC,CAACK,KAAhC,CADwB,CAAzB;AAIA,eAAKZ,UAAL,CAAgBE,YAAY,CAACjB,EAA7B,EAAiC;AAChCO,YAAAA;AADgC,WAAjC;AAGA;AATsB,OAAxB,EAWEqB,IAXF,CAWQC,QAAD,IAAc;AACnB,aAAKd,UAAL,CAAgBE,YAAY,CAACjB,EAA7B,EAAiC;AAChCQ,UAAAA,QAAQ,EAAE,IADsB;AAEhCR,UAAAA,EAAE,EAAE6B,QAAQ,CAACb,IAAT,CAAcc,GAFc;AAGhCpB,UAAAA,GAAG,EAAEmB,QAAQ,CAACb,IAAT,CAAcN;AAHa,SAAjC;AAKA,OAjBF,EAkBEqB,KAlBF,CAkBQ,MAAM;AACZ,aAAKhB,UAAL,CAAgBE,YAAY,CAACjB,EAA7B,EAAiC;AAChCS,UAAAA,KAAK,EAAE;AADyB,SAAjC;AAGA,OAtBF;AAuBA,KAlF0B;;AAAA,SAoF3BuB,YApF2B,GAoFZ,MAAOhC,EAAP,IAAc;AAC5B,YAAMb,GAAG,CAAC8C,MAAJ,CAAY,SAAQjC,EAAG,EAAvB,CAAN;AAEA,WAAKW,QAAL,CAAc;AACbhB,QAAAA,aAAa,EAAE,KAAKD,KAAL,CAAWC,aAAX,CAAyBuC,MAAzB,CACbnC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYA,EADR;AADF,OAAd;AAKA,KA5F0B;AAAA;;AAKJ,QAAjBmC,iBAAiB,GAAG;AACzB,UAAMN,QAAQ,GAAG,MAAM1C,GAAG,CAACiD,GAAJ,CAAQ,OAAR,CAAvB;AAEA,SAAKzB,QAAL,CAAc;AACbhB,MAAAA,aAAa,EAAEkC,QAAQ,CAACb,IAAT,CAAclB,GAAd,CAAmBC,IAAD,KAAW;AAC3CC,QAAAA,EAAE,EAAED,IAAI,CAAC+B,GADkC;AAE3C7B,QAAAA,IAAI,EAAEF,IAAI,CAACE,IAFgC;AAG3CC,QAAAA,YAAY,EAAEhB,QAAQ,CAACa,IAAI,CAACI,IAAN,CAHqB;AAI3CC,QAAAA,OAAO,EAAEL,IAAI,CAACW,GAJ6B;AAK3CF,QAAAA,QAAQ,EAAE,IALiC;AAM3CE,QAAAA,GAAG,EAAEX,IAAI,CAACW;AANiC,OAAX,CAAlB;AADF,KAAd;AAUA;;AA4ED2B,EAAAA,oBAAoB,GAAG;AACtB,SAAK3C,KAAL,CAAWC,aAAX,CAAyBkB,OAAzB,CAAkCd,IAAD,IAChCM,GAAG,CAACiC,eAAJ,CAAoBvC,IAAI,CAACK,OAAzB,CADD;AAGA;;AAEDmC,EAAAA,MAAM,GAAG;AACR,UAAM;AAAE5C,MAAAA;AAAF,QAAoB,KAAKD,KAA/B;AAEA,wBACC,QAAC,SAAD;AAAA,8BACC,QAAC,OAAD;AAAA,gCACC,QAAC,MAAD;AAAQ,UAAA,QAAQ,EAAE,KAAKE;AAAvB;AAAA;AAAA;AAAA;AAAA,gBADD,EAEE,CAAC,CAACD,aAAa,CAAC6C,MAAhB,iBACA,QAAC,QAAD;AACC,UAAA,KAAK,EAAE7C,aADR;AAEC,UAAA,QAAQ,EACP,KACEqC;AAJJ;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,eAaC,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,cAbD;AAAA;AAAA;AAAA;AAAA;AAAA,YADD;AAiBA;;AAxH0B;;AA2H5B,eAAevC,GAAf","sourcesContent":["import React, { Component } from 'react'\nimport { useState, useEffect } from 'react'\nimport { uniqueId } from 'lodash'\nimport filesize from 'filesize'\n\nimport api from './services/api'\n\nimport GlobalStyle from './styles/global'\nimport { Container, Content } from './styles'\n\nimport Upload from './components/Upload'\nimport FileList from './components/FileList'\n\nclass App extends Component {\n\tstate = {\n\t\tuploadedFiles: [],\n\t}\n\n\tasync componentDidMount() {\n\t\tconst response = await api.get('posts')\n\n\t\tthis.setState({\n\t\t\tuploadedFiles: response.data.map((file) => ({\n\t\t\t\tid: file._id,\n\t\t\t\tname: file.name,\n\t\t\t\treadableSize: filesize(file.size),\n\t\t\t\tpreview: file.url,\n\t\t\t\tuploaded: true,\n\t\t\t\turl: file.url,\n\t\t\t})),\n\t\t})\n\t}\n\n\thandleUpload = (files) => {\n\t\tconst uploadedFiles = files.map((file) => ({\n\t\t\tfile,\n\t\t\tid: uniqueId(),\n\t\t\tname: file.name,\n\t\t\treadableSize: filesize(file.size),\n\t\t\tpreview: URL.createObjectURL(file),\n\t\t\tprogress: 0,\n\t\t\tuploaded: false,\n\t\t\terror: false,\n\t\t\turl: null,\n\t\t}))\n\n\t\tthis.setState({\n\t\t\tuploadedFiles: this.state.uploadedFiles.concat(\n\t\t\t\tuploadedFiles\n\t\t\t),\n\t\t})\n\n\t\tuploadedFiles.forEach(this.processUpload)\n\t}\n\n\tupdateFile = (id, data) => {\n\t\tthis.setState({\n\t\t\tuploadedFiles: this.state.uploadedFiles.map(\n\t\t\t\t(uploadedFile) => {\n\t\t\t\t\treturn id === uploadedFile.id\n\t\t\t\t\t\t? { ...uploadedFile, ...data }\n\t\t\t\t\t\t: uploadedFile\n\t\t\t\t}\n\t\t\t),\n\t\t})\n\t}\n\n\tprocessUpload = (uploadedFile) => {\n\t\tconst data = new FormData()\n\n\t\tdata.append('file', uploadedFile.file, uploadedFile.name)\n\n\t\tapi.post('posts', data, {\n\t\t\tonUploadProgress: (e) => {\n\t\t\t\tconst progress = parseInt(\n\t\t\t\t\tMath.round((e.loaded * 100) / e.total)\n\t\t\t\t)\n\n\t\t\t\tthis.updateFile(uploadedFile.id, {\n\t\t\t\t\tprogress,\n\t\t\t\t})\n\t\t\t},\n\t\t})\n\t\t\t.then((response) => {\n\t\t\t\tthis.updateFile(uploadedFile.id, {\n\t\t\t\t\tuploaded: true,\n\t\t\t\t\tid: response.data._id,\n\t\t\t\t\turl: response.data.url,\n\t\t\t\t})\n\t\t\t})\n\t\t\t.catch(() => {\n\t\t\t\tthis.updateFile(uploadedFile.id, {\n\t\t\t\t\terror: true,\n\t\t\t\t})\n\t\t\t})\n\t}\n\n\thandleDelete = async (id) => {\n\t\tawait api.delete(`posts/${id}`)\n\n\t\tthis.setState({\n\t\t\tuploadedFiles: this.state.uploadedFiles.filter(\n\t\t\t\t(file) => file.id !== id\n\t\t\t),\n\t\t})\n\t}\n\n\tcomponentWillUnmount() {\n\t\tthis.state.uploadedFiles.forEach((file) =>\n\t\t\tURL.revokeObjectURL(file.preview)\n\t\t)\n\t}\n\n\trender() {\n\t\tconst { uploadedFiles } = this.state\n\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<Content>\n\t\t\t\t\t<Upload onUpload={this.handleUpload} />\n\t\t\t\t\t{!!uploadedFiles.length && (\n\t\t\t\t\t\t<FileList\n\t\t\t\t\t\t\tfiles={uploadedFiles}\n\t\t\t\t\t\t\tonDelete={\n\t\t\t\t\t\t\t\tthis\n\t\t\t\t\t\t\t\t\t.handleDelete\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t</Content>\n\t\t\t\t<GlobalStyle />\n\t\t\t</Container>\n\t\t)\n\t}\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}