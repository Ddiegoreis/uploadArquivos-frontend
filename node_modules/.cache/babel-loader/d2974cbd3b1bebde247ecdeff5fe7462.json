{"ast":null,"code":"var _jsxFileName = \"/home/diego/Documentos/www/uploadArquivos/frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { v4 as uuidV4 } from 'uuid';\nimport filesize from 'filesize';\nimport api from './services/api';\nimport GlobalStyle from './styles/global';\nimport { Container, Content } from './styles';\nimport Upload from './components/Upload';\nimport FileList from './components/FileList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [uploadedFiles, setUploadedFiles] = useState([]);\n  useEffect(() => {\n    async function loadPosts() {\n      const response = await api.get('posts');\n      const data = response.data.map(file => ({\n        id: file._id,\n        name: file.name,\n        readableSize: filesize(file.size),\n        preview: file.url,\n        uploaded: true,\n        url: file.url\n      }));\n      setUploadedFiles(data);\n    }\n\n    loadPosts();\n  }, []);\n  useEffect(() => {\n    return () => {\n      uploadedFiles.forEach(file => URL.revokeObjectURL(file.preview));\n    };\n  }, [uploadedFiles]);\n\n  function updateFile(id, data) {\n    setUploadedFiles(state => state.map(uploadedFile => {\n      if (id === uploadedFile.id) {\n        return { ...uploadedFile,\n          ...data\n        };\n      }\n\n      return uploadedFile;\n    }));\n  }\n\n  async function processUpload(uploadedFile) {\n    try {\n      const data = new FormData();\n      if (!uploadedFile.file) return;\n      data.append('file', uploadedFile.file, uploadedFile.name);\n      const response = await api.post('posts', data, {\n        onUploadProgress: event => {\n          const progress = Math.round(event.loaded * 100 / event.total);\n          updateFile(uploadedFile.id, {\n            progress\n          });\n        }\n      });\n      updateFile(uploadedFile.id, {\n        uploaded: true,\n        id: response.data._id,\n        url: response.data.url\n      });\n    } catch (err) {\n      updateFile(uploadedFile.id, {\n        error: true\n      });\n    }\n  }\n\n  function handleUpload(files) {\n    const formatedFiles = files.map(file => ({\n      file,\n      id: uuidV4(),\n      name: file.name,\n      readableSize: filesize(file.size),\n      preview: URL.createObjectURL(file),\n      progress: 0,\n      uploaded: false,\n      error: false,\n      url: null\n    }));\n    const newUploadedFiles = [...uploadedFiles, ...formatedFiles];\n    setUploadedFiles(newUploadedFiles);\n    formatedFiles.forEach(processUpload);\n  }\n\n  async function handleDelete(id) {\n    await api.delete(`posts/${id}`);\n    setUploadedFiles(files => files.filter(file => file.id !== id));\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(GlobalStyle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Content, {\n      children: [/*#__PURE__*/_jsxDEV(Upload, {\n        onUpload: handleUpload\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 5\n      }, this), !!uploadedFiles.length && /*#__PURE__*/_jsxDEV(FileList, {\n        files: uploadedFiles,\n        onDelete: handleDelete\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"fMn9FUT9c9APLotL9Ee3g2SdOCI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/diego/Documentos/www/uploadArquivos/frontend/src/App.js"],"names":["useEffect","useState","v4","uuidV4","filesize","api","GlobalStyle","Container","Content","Upload","FileList","App","uploadedFiles","setUploadedFiles","loadPosts","response","get","data","map","file","id","_id","name","readableSize","size","preview","url","uploaded","forEach","URL","revokeObjectURL","updateFile","state","uploadedFile","processUpload","FormData","append","post","onUploadProgress","event","progress","Math","round","loaded","total","err","error","handleUpload","files","formatedFiles","createObjectURL","newUploadedFiles","handleDelete","delete","filter","length"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\nimport { v4 as uuidV4 } from 'uuid'\nimport filesize from 'filesize'\n\nimport api from './services/api'\n\nimport GlobalStyle from './styles/global'\nimport { Container, Content } from './styles'\n\nimport Upload from './components/Upload'\nimport FileList from './components/FileList'\n\nfunction App() {\n\tconst [uploadedFiles, setUploadedFiles] = useState([])\n\n\tuseEffect(() => {\n\t\tasync function loadPosts() {\n\t\t\tconst response = await api.get('posts')\n\n\t\t\tconst data = response.data.map((file) => ({\n\t\t\t\tid: file._id,\n\t\t\t\tname: file.name,\n\t\t\t\treadableSize: filesize(file.size),\n\t\t\t\tpreview: file.url,\n\t\t\t\tuploaded: true,\n\t\t\t\turl: file.url,\n\t\t\t}))\n\n\t\t\tsetUploadedFiles(data)\n\t\t}\n\n\t\tloadPosts()\n\t}, [])\n\n\tuseEffect(() => {\n\t\treturn () => {\n\t\t\tuploadedFiles.forEach((file) =>\n\t\t\t\tURL.revokeObjectURL(file.preview)\n\t\t\t)\n\t\t}\n\t}, [uploadedFiles])\n\n\tfunction updateFile(id, data) {\n\t\tsetUploadedFiles((state) =>\n\t\t\tstate.map((uploadedFile) => {\n\t\t\t\tif (id === uploadedFile.id) {\n\t\t\t\t\treturn { ...uploadedFile, ...data }\n\t\t\t\t}\n\n\t\t\t\treturn uploadedFile\n\t\t\t})\n\t\t)\n\t}\n\n\tasync function processUpload(uploadedFile) {\n\t\ttry {\n\t\t\tconst data = new FormData()\n\n\t\t\tif (!uploadedFile.file) return\n\n\t\t\tdata.append(\n\t\t\t\t'file',\n\t\t\t\tuploadedFile.file,\n\t\t\t\tuploadedFile.name\n\t\t\t)\n\n\t\t\tconst response = await api.post('posts', data, {\n\t\t\t\tonUploadProgress: (event) => {\n\t\t\t\t\t\n\t\t\t\t\tconst progress = Math.round(\n\t\t\t\t\t\t(event.loaded * 100) /\n\t\t\t\t\t\t\tevent.total\n\t\t\t\t\t)\n\n\t\t\t\t\tupdateFile(uploadedFile.id, {\n\t\t\t\t\t\tprogress,\n\t\t\t\t\t})\n\t\t\t\t},\n\t\t\t})\n\n\t\t\tupdateFile(uploadedFile.id, {\n\t\t\t\tuploaded: true,\n\t\t\t\tid: response.data._id,\n\t\t\t\turl: response.data.url,\n\t\t\t})\n\t\t} catch (err) {\n\t\t\tupdateFile(uploadedFile.id, {\n\t\t\t\terror: true,\n\t\t\t})\n\t\t}\n\t}\n\n\tfunction handleUpload(files) {\n\t\tconst formatedFiles = files.map((file) => ({\n\t\t\tfile,\n\t\t\tid: uuidV4(),\n\t\t\tname: file.name,\n\t\t\treadableSize: filesize(file.size),\n\t\t\tpreview: URL.createObjectURL(file),\n\t\t\tprogress: 0,\n\t\t\tuploaded: false,\n\t\t\terror: false,\n\t\t\turl: null,\n\t\t}))\n\n\t\tconst newUploadedFiles = [...uploadedFiles, ...formatedFiles]\n\n\t\tsetUploadedFiles(newUploadedFiles)\n\t\tformatedFiles.forEach(processUpload)\n\t}\n\n\tasync function handleDelete(id) {\n\t\tawait api.delete(`posts/${id}`)\n\n\t\tsetUploadedFiles((files) =>\n\t\t\tfiles.filter((file) => file.id !== id)\n\t\t)\n\t}\n\n\treturn (\n\t\t<Container>\n\t\t\t<GlobalStyle />\n\t\t\t<Content>\n\t\t\t\t<Upload onUpload={handleUpload} />\n\t\t\t\t{!!uploadedFiles.length && (\n\t\t\t\t\t<FileList\n\t\t\t\t\t\tfiles={uploadedFiles}\n\t\t\t\t\t\tonDelete={handleDelete}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</Content>\n\t\t</Container>\n\t)\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}