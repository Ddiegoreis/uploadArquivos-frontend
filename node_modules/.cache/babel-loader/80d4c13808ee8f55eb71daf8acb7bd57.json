{"ast":null,"code":"var _jsxFileName = \"/home/diego/Documentos/www/uploadArquivos/frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component } from 'react';\nimport { useState, useEffect } from 'react';\nimport { uniqueId } from 'lodash';\nimport filesize from 'filesize';\nimport api from './services/api';\nimport GlobalStyle from './styles/global';\nimport { Container, Content } from './styles';\nimport Upload from './components/Upload';\nimport FileList from './components/FileList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [uploadedFiles, setUploadedFiles] = useState([]); // async componentDidMount() {\n  // \tconst response = await api.get('posts')\n  // \tthis.setState({\n  // \t\tuploadedFiles: response.data.map((file) => ({\n  // \t\t\tid: file._id,\n  // \t\t\tname: file.name,\n  // \t\t\treadableSize: filesize(file.size),\n  // \t\t\tpreview: file.url,\n  // \t\t\tuploaded: true,\n  // \t\t\turl: file.url,\n  // \t\t})),\n  // \t})\n  // }\n\n  const handleUpload = files => {\n    const uploadedFiles = files.map(file => ({\n      file,\n      id: uniqueId(),\n      name: file.name,\n      readableSize: filesize(file.size),\n      preview: URL.createObjectURL(file),\n      progress: 0,\n      uploaded: false,\n      error: false,\n      url: null\n    }));\n    setUploadedFiles({\n      uploadedFiles: uploadedFiles.concat(uploadedFiles)\n    });\n    uploadedFiles.forEach(processUpload);\n  };\n\n  cupdateFile = (id, data) => {\n    setUploadedFiles({\n      uploadedFiles: uploadedFiles.map(uploadedFile => {\n        return id === uploadedFile.id ? { ...uploadedFile,\n          ...data\n        } : uploadedFile;\n      })\n    });\n  };\n\n  processUpload = uploadedFile => {\n    const data = new FormData();\n    data.append('file', uploadedFile.file, uploadedFile.name);\n    api.post('posts', data, {\n      onUploadProgress: e => {\n        const progress = parseInt(Math.round(e.loaded * 100 / e.total));\n        updateFile(uploadedFile.id, {\n          progress\n        });\n      }\n    }).then(response => {\n      updateFile(uploadedFile.id, {\n        uploaded: true,\n        id: response.data._id,\n        url: response.data.url\n      });\n    }).catch(() => {\n      updateFile(uploadedFile.id, {\n        error: true\n      });\n    });\n  };\n\n  handleDelete = async id => {\n    await api.delete(`posts/${id}`);\n    setUploadedFiles({\n      uploadedFiles: uploadedFiles.filter(file => file.id !== id)\n    });\n  }; // componentWillUnmount() {\n  // \tuploadedFiles.forEach((file) =>\n  // \t\tURL.revokeObjectURL(file.preview)\n  // \t)\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Content, {\n      children: [/*#__PURE__*/_jsxDEV(Upload, {\n        onUpload: handleUpload\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 5\n      }, this), !!uploadedFiles.length && /*#__PURE__*/_jsxDEV(FileList, {\n        files: uploadedFiles,\n        onDelete: handleDelete\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(GlobalStyle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"+65XWmZ3IQzrOB7vdBp7tbCqjTw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/diego/Documentos/www/uploadArquivos/frontend/src/App.js"],"names":["React","Component","useState","useEffect","uniqueId","filesize","api","GlobalStyle","Container","Content","Upload","FileList","App","uploadedFiles","setUploadedFiles","handleUpload","files","map","file","id","name","readableSize","size","preview","URL","createObjectURL","progress","uploaded","error","url","concat","forEach","processUpload","cupdateFile","data","uploadedFile","FormData","append","post","onUploadProgress","e","parseInt","Math","round","loaded","total","updateFile","then","response","_id","catch","handleDelete","delete","filter","length"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { useState, useEffect } from 'react'\nimport { uniqueId } from 'lodash'\nimport filesize from 'filesize'\n\nimport api from './services/api'\n\nimport GlobalStyle from './styles/global'\nimport { Container, Content } from './styles'\n\nimport Upload from './components/Upload'\nimport FileList from './components/FileList'\n\nfunction App() {\n\tconst [uploadedFiles, setUploadedFiles] = useState([])\n\n\t// async componentDidMount() {\n\t// \tconst response = await api.get('posts')\n\n\t// \tthis.setState({\n\t// \t\tuploadedFiles: response.data.map((file) => ({\n\t// \t\t\tid: file._id,\n\t// \t\t\tname: file.name,\n\t// \t\t\treadableSize: filesize(file.size),\n\t// \t\t\tpreview: file.url,\n\t// \t\t\tuploaded: true,\n\t// \t\t\turl: file.url,\n\t// \t\t})),\n\t// \t})\n\t// }\n\n\tconst handleUpload = (files) => {\n\t\tconst uploadedFiles = files.map((file) => ({\n\t\t\tfile,\n\t\t\tid: uniqueId(),\n\t\t\tname: file.name,\n\t\t\treadableSize: filesize(file.size),\n\t\t\tpreview: URL.createObjectURL(file),\n\t\t\tprogress: 0,\n\t\t\tuploaded: false,\n\t\t\terror: false,\n\t\t\turl: null,\n\t\t}))\n\n\t\tsetUploadedFiles({\n\t\t\tuploadedFiles: uploadedFiles.concat(uploadedFiles),\n\t\t})\n\n\t\tuploadedFiles.forEach(processUpload)\n\t}\n\n\tcupdateFile = (id, data) => {\n\t\tsetUploadedFiles({\n\t\t\tuploadedFiles: uploadedFiles.map((uploadedFile) => {\n\t\t\t\treturn id === uploadedFile.id\n\t\t\t\t\t? { ...uploadedFile, ...data }\n\t\t\t\t\t: uploadedFile\n\t\t\t}),\n\t\t})\n\t}\n\n\tprocessUpload = (uploadedFile) => {\n\t\tconst data = new FormData()\n\n\t\tdata.append('file', uploadedFile.file, uploadedFile.name)\n\n\t\tapi.post('posts', data, {\n\t\t\tonUploadProgress: (e) => {\n\t\t\t\tconst progress = parseInt(\n\t\t\t\t\tMath.round((e.loaded * 100) / e.total)\n\t\t\t\t)\n\n\t\t\t\tupdateFile(uploadedFile.id, {\n\t\t\t\t\tprogress,\n\t\t\t\t})\n\t\t\t},\n\t\t})\n\t\t\t.then((response) => {\n\t\t\t\tupdateFile(uploadedFile.id, {\n\t\t\t\t\tuploaded: true,\n\t\t\t\t\tid: response.data._id,\n\t\t\t\t\turl: response.data.url,\n\t\t\t\t})\n\t\t\t})\n\t\t\t.catch(() => {\n\t\t\t\tupdateFile(uploadedFile.id, {\n\t\t\t\t\terror: true,\n\t\t\t\t})\n\t\t\t})\n\t}\n\n\thandleDelete = async (id) => {\n\t\tawait api.delete(`posts/${id}`)\n\n\t\tsetUploadedFiles({\n\t\t\tuploadedFiles: uploadedFiles.filter(\n\t\t\t\t(file) => file.id !== id\n\t\t\t),\n\t\t})\n\t}\n\n\t// componentWillUnmount() {\n\t// \tuploadedFiles.forEach((file) =>\n\t// \t\tURL.revokeObjectURL(file.preview)\n\t// \t)\n\t// }\n\n\treturn (\n\t\t<Container>\n\t\t\t<Content>\n\t\t\t\t<Upload onUpload={handleUpload} />\n\t\t\t\t{!!uploadedFiles.length && (\n\t\t\t\t\t<FileList\n\t\t\t\t\t\tfiles={uploadedFiles}\n\t\t\t\t\t\tonDelete={handleDelete}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</Content>\n\t\t\t<GlobalStyle />\n\t\t</Container>\n\t)\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}