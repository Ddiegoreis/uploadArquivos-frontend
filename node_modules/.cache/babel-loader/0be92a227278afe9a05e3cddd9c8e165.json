{"ast":null,"code":"var _jsxFileName = \"/home/diego/Documentos/www/uploadArquivos/frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { v4 as uuidV4 } from 'uuid';\nimport filesize from 'filesize';\nimport api from './services/api';\nimport GlobalStyle from './styles/global';\nimport { Container, Content } from './styles';\nimport Upload from './components/Upload';\nimport FileList from './components/FileList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [uploadedFiles, setUploadedFiles] = useState([]);\n  useEffect(() => {\n    async function loadPosts() {\n      const response = await api.get('posts');\n      const data = response.data.map(file => ({\n        id: file._id,\n        name: file.name,\n        readableSize: filesize(file.size),\n        preview: file.url,\n        uploaded: true,\n        url: file.url\n      }));\n      setUploadedFiles(data);\n    }\n\n    loadPosts();\n  }, []);\n  useEffect(() => {\n    return () => {\n      uploadedFiles.forEach(file => URL.revokeObjectURL(file.preview));\n    };\n  }, [uploadedFiles]);\n\n  function updateFile(id, data) {\n    setUploadedFiles(state => state.map(uploadedFile => {\n      if (id === uploadedFile.id) {\n        return { ...uploadedFile,\n          ...data\n        };\n      }\n\n      return uploadedFile;\n    }));\n  }\n\n  async function processUpload(uploadedFile) {\n    try {\n      const data = new FormData();\n      if (!uploadedFile.file) return;\n      data.append('file', uploadedFile.file, uploadedFile.name);\n      const response = await api.post('posts', data, {\n        onUploadProgress: event => {\n          console.log('load', event.loaded);\n          const progress = Math.round(event.loaded * 100 / event.total);\n          updateFile(uploadedFile.id, {\n            progress\n          });\n        }\n      });\n      updateFile(uploadedFile.id, {\n        uploaded: true,\n        id: response.data._id,\n        url: response.data.url\n      });\n    } catch (err) {\n      updateFile(uploadedFile.id, {\n        error: true\n      });\n    }\n  }\n\n  function handleUpload(files) {\n    const formatedFiles = files.map(file => ({\n      file,\n      id: uuidV4(),\n      name: file.name,\n      readableSize: filesize(file.size),\n      preview: URL.createObjectURL(file),\n      progress: 0,\n      uploaded: false,\n      error: false,\n      url: null\n    }));\n    const newUploadedFiles = [...uploadedFiles, ...formatedFiles];\n    setUploadedFiles(newUploadedFiles);\n    formatedFiles.forEach(processUpload);\n  }\n\n  async function handleDelete(id) {\n    await api.delete(`posts/${id}`);\n    setUploadedFiles(files => files.filter(file => file.id !== id));\n  }\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(GlobalStyle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Content, {\n      children: [/*#__PURE__*/_jsxDEV(Upload, {\n        onUpload: handleUpload\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), !!uploadedFiles.length && /*#__PURE__*/_jsxDEV(FileList, {\n        files: uploadedFiles,\n        onDelete: handleDelete\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"fMn9FUT9c9APLotL9Ee3g2SdOCI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/diego/Documentos/www/uploadArquivos/frontend/src/App.js"],"names":["useEffect","useState","v4","uuidV4","filesize","api","GlobalStyle","Container","Content","Upload","FileList","App","uploadedFiles","setUploadedFiles","loadPosts","response","get","data","map","file","id","_id","name","readableSize","size","preview","url","uploaded","forEach","URL","revokeObjectURL","updateFile","state","uploadedFile","processUpload","FormData","append","post","onUploadProgress","event","console","log","loaded","progress","Math","round","total","err","error","handleUpload","files","formatedFiles","createObjectURL","newUploadedFiles","handleDelete","delete","filter","length"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport { v4 as uuidV4 } from 'uuid';\nimport filesize from 'filesize';\n\nimport api from './services/api';\n\nimport GlobalStyle from './styles/global';\nimport { Container, Content } from './styles';\n\nimport Upload from './components/Upload';\nimport FileList from './components/FileList'\n\nfunction App() {\n  const [uploadedFiles, setUploadedFiles] = useState([]);\n\n  useEffect(() => {\n    async function loadPosts() {\n      const response = await api.get('posts');\n\n      const data = response.data.map(file => ({\n        id: file._id,\n        name: file.name,\n        readableSize: filesize(file.size),\n        preview: file.url,\n        uploaded: true,\n        url: file.url,\n      }));\n\n      setUploadedFiles(data);\n    }\n\n    loadPosts()\n  }, []);\n\n  useEffect(() => {\n    return () => {\n      uploadedFiles.forEach(file => URL.revokeObjectURL(file.preview))\n    }\n  }, [uploadedFiles]);\n\n  function updateFile(id, data) {\n    setUploadedFiles(state => state.map(uploadedFile => {\n      if (id === uploadedFile.id) {\n        return { ...uploadedFile, ...data }\n      }\n\n      return uploadedFile;\n    }));\n  }\n\n  async function processUpload(uploadedFile) {\n    try {\n      const data = new FormData();\n\n      if (!uploadedFile.file) return;\n\n      data.append('file', uploadedFile.file, uploadedFile.name);\n\n      const response = await api.post('posts', data, {\n        onUploadProgress: (event: ProgressEvent) => {\n          console.log('load', event.loaded)\n          const progress = Math.round((event.loaded * 100)/event.total);\n\n          updateFile(uploadedFile.id, { progress });\n        }\n      });\n\n      updateFile(uploadedFile.id, {\n        uploaded: true,\n        id: response.data._id,\n        url: response.data.url,\n      });\n    } catch (err) {\n      updateFile(uploadedFile.id, {\n        error: true,\n      });\n    }\n  }\n\n  function handleUpload(files: File[]) {\n    const formatedFiles = files.map(file => ({\n      file,\n      id: uuidV4(),\n      name: file.name,\n      readableSize: filesize(file.size),\n      preview: URL.createObjectURL(file),\n      progress: 0,\n      uploaded: false,\n      error: false,\n      url: null,\n    }));\n\n    const newUploadedFiles = [...uploadedFiles, ...formatedFiles]\n\n    setUploadedFiles(newUploadedFiles);\n    formatedFiles.forEach(processUpload);\n  }\n\n  async function handleDelete(id) {\n    await api.delete(`posts/${id}`);\n\n    setUploadedFiles(files => files.filter(file => file.id !== id));\n  }\n\n  return (\n    <Container>\n      <GlobalStyle />\n      <Content>\n        <Upload onUpload={handleUpload} />\n        {!!uploadedFiles.length && (\n          <FileList files={uploadedFiles} onDelete={handleDelete} />\n        )}\n      </Content>\n    </Container>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}